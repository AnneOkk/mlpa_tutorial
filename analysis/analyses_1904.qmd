---
title: "LPA Leadership tactics"
execute:
  echo: true
  warning: false
  message: false
  cache: false
format:
  html:
    self-contained: true
    toc: true
    toc_float: true
    toc-depth: 3
---

```{r}
source("../R/custom-functions.R")
```

# Single level 

## Reading in data

```{r}
data <- read_data_sav(rel_directory = "/data/", pattern = "data_full_lead.sav")
data <- data[[2]]

```



## Rename data

```{r}
names(data) <- gsub("^(.*[\\d]*)(\\d)$", "\\1_\\2", names(data))
```

## Select certain columns

```{r}
data_comp <- data %>% select(matches("\\d$")) %>% select(-matches("CHECK|MSELFE1_0|Q2"))
data_no_comp <- data %>% select(-matches("\\d$"))
```

## Make composite data frame

```{r}
comp_split <- data_comp %>% remove_all_labels(.) %>%
  split.default(sub("_.", "", names(data_comp)))

comp <- purrr::map(comp_split, ~ rowMeans(.x, na.rm=TRUE))
alph <- purrr::map(comp_split, ~ psych::alpha(.x), data = .x) %>%
  purrr::map(~ .x$total)

comp_df <- do.call("cbind", comp) %>% as.data.frame(.) %>%  cbind(., data_no_comp) %>% remove_all_labels(.)
alph_df <- do.call("rbind", alph) %>% round(., 2)
```

## Reliabilities

```{r reliabilities, include = T}
# prolific 
alph_df %>%
DT::datatable(
    extensions = 'Buttons', 
    options = list(dom = 'Bfrtip', 
                   buttons = c('excel', "csv"),
                   pageLength = 20))
```

## Correlations

```{r}
# select only numeric 
comp_df_mum <- comp_df[ , purrr::map_lgl(comp_df, is.numeric)]
cor_tab <- corstars(comp_df_mum)
cor_tab %>%
  DT::datatable(
    extensions = 'Buttons', 
    options = list(dom = 'Bfrtip', 
                   buttons = c('excel', "csv"),
                   pageLength = 35,
                  lengthMenu = c(20, 20, 20, 20)))

```

## CFA

### Both tacticts types with second order

```{r}
library(lavaan)
CFA <- '
  LINAP =~ LINAP_1 + LINAP_2 + LINAP_3 + LINAP_4
  LCONSUL =~ LCONSUL_1 + LCONSUL_2 + LCONSUL_3 + LCONSUL_4 
  LINTEG =~ LINTEG_1 + LINTEG_2 + LINTEG_3 + LINTEG_4 
  LPEAPP =~ LPEAPP_1 + LPEAPP_2 + LPEAPP_3 + LPEAPP_4 
   
  # Second order factor SOFTTACTICS 
  SOFT_TACTICS =~ LINAP + LCONSUL + LINTEG + LPEAPP 
  
  LEXCH =~ LEXCH_1 + LEXCH_2 + LEXCH_3 + LEXCH_4 
  LLEGTAC =~ LLEGTAC_1 + LLEGTAC_2 + LLEGTAC_3 + LLEGTAC_4 
  LPRESS =~ LPRESS_1 + LPRESS_2+ LPRESS_3 + LPRESS_4 
  LCOALT =~ LCOALT_1 + LCOALT_2 + LCOALT_3+ LCOALT_4 
   
  # Second order factor HARDTACTICS 
  HARDTACTICS =~ LEXCH + LLEGTAC + LPRESS + LCOALT 
  
'

fit1 <- sem(CFA, data = data)
#summary(fit1, fit.measures=TRUE)

fitMeasures(fit1, c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "tli", "srmr"))
```

### No second order soft

```{r}
library(lavaan)
library("tidySEM")
CFA <- '
  LINAP =~ LINAP_1 + LINAP_2 + LINAP_3 + LINAP_4
  LCONSUL =~ LCONSUL_1 + LCONSUL_2 + LCONSUL_3 + LCONSUL_4 
  LINTEG =~ LINTEG_1 + LINTEG_2 + LINTEG_3 + LINTEG_4 
  LPEAPP =~ LPEAPP_1 + LPEAPP_2 + LPEAPP_3 + LPEAPP_4 
'

fit1 <- sem(CFA, data = data)

lay <- get_layout("", "LINAP", "","","","LCONSUL","","","",
                  "LINTEG", "", "", "", "LPEAPP", "", "",
                  "LINAP_1", "LINAP_2", "LINAP_3", "LINAP_4", "LCONSUL_1", "LCONSUL_2", "LCONSUL_3", "LCONSUL_4", "LINTEG_1", "LINTEG_2", "LINTEG_3", "LINTEG_4", "LPEAPP_1", "LPEAPP_2", "LPEAPP_3", "LPEAPP_4", rows = 2)

graph_sem(fit1, layout = lay, text_size = 3)

fitMeasures(fit1, c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "tli", "srmr"))
```

### No second order hard

```{r}
library(lavaan)
CFA <- '
  LEXCH =~ LEXCH_1 + LEXCH_2 + LEXCH_3 + LEXCH_4 
  LLEGTAC =~ LLEGTAC_1 + LLEGTAC_2 + LLEGTAC_3 + LLEGTAC_4 
  LPRESS =~ LPRESS_1 + LPRESS_2+ LPRESS_3 + LPRESS_4 
  LCOALT =~ LCOALT_1 + LCOALT_2 + LCOALT_3+ LCOALT_4 
'

fit1 <- sem(CFA, data = data)


lay <- get_layout("", "LLEGTAC", "","","","LPRESS","","","",
                  "LEXCH", "", "", "", "LCOALT", "", "",
                  "LLEGTAC_1", "LLEGTAC_2", "LLEGTAC_3", "LLEGTAC_4", "LPRESS_1", "LPRESS_2", "LPRESS_3", "LPRESS_4", "LEXCH_1", "LEXCH_2", "LEXCH_3", "LEXCH_4", "LCOALT_1", "LCOALT_2", "LCOALT_3", "LCOALT_4", rows = 2)

graph_sem(fit1, layout = lay, text_size = 3)

fitMeasures(fit1, c("chisq", "df", "pvalue", "cfi", "rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "tli", "srmr"))
```


```{r}
#| eval: false

# Multilevel CFA
library(lavaan)
MCFA <- '
level: 1
  LINAP_w =~ LINAP_1 + LINAP_2 + LINAP_3 + LINAP_4
  LCONSUL_w =~ LCONSUL_1 + LCONSUL_2 + LCONSUL_3 + LCONSUL_4 
  LINTEG_w =~ LINTEG_1 + LINTEG_2 + LINTEG_3 + LINTEG_4 
  LPEAPP_w =~ LPEAPP_1 + LPEAPP_2 + LPEAPP_3 + LPEAPP_4 
   
  # Second order factor SOFTTACTICS 
  SOFT_TACTICS_w =~ LINAP_w + LCONSUL_w + LINTEG_w + LPEAPP_w 
  
level: 2
  LINAP_b =~ LINAP_1 + LINAP_2 + LINAP_3 + LINAP_4
  LCONSUL_b =~ LCONSUL_1 + LCONSUL_2 + LCONSUL_3 + LCONSUL_4 
  LINTEG_b =~ LINTEG_1 + LINTEG_2 + LINTEG_3 + LINTEG_4 
  LPEAPP_b =~ LPEAPP_1 + LPEAPP_2 + LPEAPP_3 + LPEAPP_4 
   
  # Second order factor SOFTTACTICS 
  SOFT_TACTICS_b =~ LINAP_b + LCONSUL_b + LINTEG_b + LPEAPP_b
'

fit1 <- sem(MCFA, data = data, cluster = "LG", std.lv  = TRUE, verbose = FALSE, estimator="MLR")
summary(fit1, fit.measures=TRUE)


```

## LPA

```{r}
library(tidyLPA)
data_LPA <- comp_df %>% select(LRAPER, LINAP, LCONSUL, LINTEG, LPEAPP, LEXCH, LLEGTAC, LPRESS, LCOALT)

data_LPA_soft <- comp_df %>% select(LINAP, LCONSUL, LINTEG, LPEAPP)

data_LPA_hard <- comp_df %>% select(LEXCH, LLEGTAC, LPRESS, LCOALT)

data_LPA_mix <- comp_df %>% select(LEXCH, LINAP, LLEGTAC, LPRESS, LCONSUL) # see https://www.sciencedirect.com/science/article/abs/pii/S0148296321002885

data_LPA_overall <- cbind(rowMeans(cbind(data_LPA$LINAP, data_LPA$LCONSUL, data_LPA$LINTEG, data_LPA$LPEAPP)), 
                          rowMeans(cbind(data_LPA$LEXCH, data_LPA$LLEGTAC, data_LPA$LPRESS, data_LPA$LCOALT)), 
                          data_LPA$LRAPER)


colnames(data_LPA_overall) <- c("soft", "hard", "ratio") 

data_LPA <- data_LPA %>% dplyr::rename(Persu = LRAPER,
                                       Inspir = LINAP,
                                       Consul = LCONSUL,
                                       Integ = LINTEG,
                                       Appeal = LPEAPP,
                                       Excha = LEXCH,
                                       Legit = LLEGTAC,
                                       Press = LPRESS,
                                       Coal = LCOALT)

data_LPA_soft <- data_LPA_soft %>% dplyr::rename(
                                       Inspir = LINAP,
                                       Consul = LCONSUL,
                                       Integ = LINTEG,
                                       Appeal = LPEAPP)

data_LPA_hard <- data_LPA_hard %>% dplyr::rename(
                                       Excha = LEXCH,
                                       Legit = LLEGTAC,
                                       Press = LPRESS,
                                       Coal = LCOALT)

#LPA <- data_LPA %>% estimate_profiles(n_profiles = 3:8, models = 1, package = "mplus", 
#                      ANALYSIS = "starts = 200, 10;")  #%>%
#compare_solutions() #for final model: starts = 7000, 200;

#LPA_soft <- data_LPA_soft %>% estimate_profiles(n_profiles = 3:8, models = 1, package = "mplus", 
#                      ANALYSIS = "starts = 200, 10;") 

#LPA_hard <- data_LPA_hard %>% estimate_profiles(n_profiles = 3:8, models = 1, package = "mplus", 
#                      ANALYSIS = "starts = 200, 10;") 

#LPA_overall <- data_LPA_overall %>% estimate_profiles(n_profiles = 3:8, models = 1, package = "mplus", 
#                      ANALYSIS = "starts = 200, 10;") 

LPA_mix <- data_LPA_mix %>% estimate_profiles(n_profiles = 3:8, models = 1, package = "mplus", 
                      ANALYSIS = "starts = 200, 10;") 

```

It seems like the profile solutions get better the more profiles we add. As you can see from the plots below, it becomes very hard to interpret the profiles if there are more then approx. 7 distinct profiles. We need to reconsider.. maybe it makes sense to select only a certain amount of leadership tactics. We need to discuss this.

### 3 profiles

```{r}
plot_profiles(LPA_mix$model_1_class_5, to_center = F)
```

As you can see, the mean and variance differs a bit for the different tactics. The mean is generally higher for persuasion, inspiration, consultation. And variance is higher for the other tactics. This is no interesting profile solution - people are not differentiable for the first 4 tactics and the profiles for the last 5 tactics suggest only 'level differences'. It looks similar for the other profile solutions with more profiles added. We need to discuss this.

### 4 profiles

```{r}
plot_profiles(LPA$model_1_class_4, to_center = F)
```

### 5 profiles

```{r}
plot_profiles(LPA$model_1_class_5, to_center = F)
```

### 6 profiles

```{r}
plot_profiles(LPA$model_1_class_6, to_center = F)
```

### 7 profiles

```{r}
plot_profiles(LPA$model_1_class_7, to_center = F)
```

### 8 profiles

```{r}
plot_profiles(LPA$model_1_class_8, to_center = F)
```

## Soft tactics only

### 3 profiles

```{r}
plot_profiles(LPA_soft$model_1_class_3, to_center = F)
LPA_soft$model_1_class_3
```

### 4 profiles
```{r}
plot_profiles(LPA_soft$model_1_class_4, to_center = F)
LPA_soft$model_1_class_4
```

### 5 profiles
```{r}
plot_profiles(LPA_soft$model_1_class_5, to_center = F)
LPA_soft$model_1_class_5
```

### 6 profiles
```{r}
plot_profiles(LPA_soft$model_1_class_6, to_center = F)
LPA_soft$model_1_class_6
```

## Hard tactics only

### 3 profiles
```{r}
plot_profiles(LPA_hard$model_1_class_3, to_center = F)
LPA_hard$model_1_class_3
```

### 4 profiles
```{r}
plot_profiles(LPA_hard$model_1_class_4, to_center = F)
LPA_hard$model_1_class_4
```

### 5 profiles
```{r}
plot_profiles(LPA_hard$model_1_class_5, to_center = F)
LPA_hard$model_1_class_5
```

### 6 profiles
```{r}
plot_profiles(LPA_hard$model_1_class_6, to_center = F)
LPA_hard$model_1_class_6
```


## Soft, hard, rational persuasion

### 3 profiles

```{r}
plot_profiles(LPA_overall$model_1_class_3, to_center = F)
LPA_overall$model_1_class_3

get_estimates(LPA_overall$model_1_class_3)
```
### 4 profiles

```{r}
plot_profiles(LPA_overall$model_1_class_4, to_center = F)
LPA_overall$model_1_class_4
get_estimates(LPA_overall$model_1_class_4)
```

### 5 profiles

```{r}
plot_profiles(LPA_overall$model_1_class_5, to_center = F)
LPA_overall$model_1_class_5
get_estimates(LPA_overall$model_1_class_5)
```

### 6 profiles

```{r}
plot_profiles(LPA_overall$model_1_class_6, to_center = F)
LPA_overall$model_1_class_6
get_estimates(LPA_overall$model_1_class_6)
```

### 7 profiles

```{r}
plot_profiles(LPA_overall$model_1_class_7, to_center = F)
LPA_overall$model_1_class_7
get_estimates(LPA_overall$model_1_class_7)
```

### 8 profiles

```{r}
plot_profiles(LPA_overall$model_1_class_8, to_center = F)
LPA_overall$model_1_class_8
get_estimates(LPA_overall$model_1_class_8)
```

```{r}
#| include: false

## MLCA
names(comp_df)
mglca3 = glca(item(LRAPER, LINAP, LCONSUL, LINTEG, LPEAPP, LEXCH, LLEGTAC, LPRESS, LCOALT) ~ 1,
group = LG, data = comp_df, nclass = 3, n.init = 1)
mglca4 = glca(item(LRAPER, LINAP, LCONSUL, LINTEG, LPEAPP, LEXCH, LLEGTAC, LPRESS, LCOALT) ~ 1,
group = LG, data = comp_df, nclass = 4, n.init = 1)
mglca5 = glca(item(LRAPER, LINAP, LCONSUL, LINTEG, LPEAPP, LEXCH, LLEGTAC, LPRESS, LCOALT) ~ 1,
group = LG, data = comp_df, nclass = 5, n.init = 1)
mglca6 = glca(item(LRAPER, LINAP, LCONSUL, LINTEG, LPEAPP, LEXCH, LLEGTAC, LPRESS, LCOALT) ~ 1,
group = LG, data = comp_df, nclass = 6, n.init = 1)

gofglca(mglca3, mglca4, mglca5, mglca6)

plot(mglca5)
```


## Mixed 

### 5 profiles

```{r}
plot_profiles(LPA_mix$model_1_class_5, to_center = F)
LPA_mix$model_1_class_5
get_estimates(LPA_mix$model_1_class_5)
```


## BCH 

```{r}
LPA_df <- comp_df %>% select_if(function(col) is.numeric(col) | is.factor(col))

```
### Step 1
 
```{r eval = T, echo = T, include = T}
library(MplusAutomation)
step1 <- mplusObject(TITLE = "BCH Step 1;",
VARIABLE =
"usevar = LEXCH LINAP LLEGTAC LPRESS LCONSUL;
CATEGORICAL ARE 
CLASSES = c(4);
AUXILIARY = LDEPR LOCATION LAGE LEDU TENURE_O TEAMSIZE;",
ANALYSIS  ="TYPE = MIXTURE; starts = 7000 200;
LRTSTARTS = 0 0 500 200;",

SAVEDATA = "FILE = file=2.dat; save=bch;
Missflag= 999;",           
OUTPUT =   "sampstat residual tech11 tech14",
usevariables = colnames(LPA_df),
rdata = LPA_df)
     
step1_fit_Pboth_4 <- mplusModeler(step1,
                            dataout = "Mplus/Step1_step_hard_4.dat",
                            modelout= "Mplus/Step1_step_hard_4.inp",
                            check=TRUE, run = TRUE, hashfilename = FALSE)

```

### Step 2 - save data for 4 profile solution

```{r include = T, echo = T}
savedata_both <- as.data.frame(step1_fit_Pboth_4[["results"]]
                                   [["savedata"]])

```

### Step 3 LDEPR as outcomne, with control variables included

```{r echo = T, include = T}
library(glue)
step3  <- mplusObject(
  TITLE = "BCH step 3", 
  
  VARIABLE = 
 "missing are all (999);
  classes = c(4);
  usevar =  LDEPR LAGE LEDU TENURE_O TEAMSIZE
 BCHW1 BCHW2 BCHW3 BCHW4;
 training = BCHW1 BCHW2 BCHW3 BCHW4(bch);",
  
  ANALYSIS = 
 "estimator = mlr; 
  type = mixture; 
  starts = 0;",
  
  MODEL =
  glue(
 " %OVERALL%
 LDEPR ON LAGE LEDU TENURE_O TEAMSIZE; 
 c ON LAGE LEDU TENURE_O TEAMSIZE;
 
  %C#1%
  [LDEPR](e1);    ! conditional distal mean 
  LDEPR;          ! conditional distal variance (freely estimated)
 
  %C#2%
  [LDEPR](e2);    ! conditional distal mean 
  LDEPR;          ! conditional distal variance (freely estimated)
  
  %C#3%
  [LDEPR](e3);    ! conditional distal mean 
  LDEPR;          ! conditional distal variance (freely estimated)

  %C#4%
  [LDEPR](e4);    ! conditional distal mean 
  LDEPR;          ! conditional distal variance (freely estimated)"),
 
  
  MODELCONSTRAINT = 
"New (d_e_12 d_e_13 d_e_14 d_e_23 d_e_24 d_e_34); 
 d_e_12 = e1-e2;  
 d_e_13 = e1-e3;
 d_e_14 = e1-e4;
 d_e_23 = e2-e3;
 d_e_24 = e2-e4;
 d_e_34 = e3-e4;",
 OUTPUT =   "sampstat residual tech11 tech14;", 
 usevariables = colnames(savedata_both),
  rdata = savedata_both)

step3_fit_errpre_both <- mplusModeler(step3,
               dataout= "Mplus/output/Step3_step_hard_3.dat", 
               modelout="Mplus/output/Step3_step_hard_3.inp", 
               check=TRUE, run = TRUE, hashfilename = FALSE)

step3_fit_errpre_both
```

## Results

```{r}
output <- readModels("Mplus/output/Step3_step_hard_3.out")

output$summaries
output$parameters
```

![Mplus Output File](Mplus/output/Step3_step_hard_3.pdf){width=90%}


# Multilevel data 

```{r}
multidat <- read_data_sav(rel_directory = "/data/", pattern = "S_PMKNO_2022_MDW_LDG_data.sav") %>% .[[2]]

lapply(multidat, function(x) attributes(x)$label)


# rename and recode negatively coded items
multidat <- multidat %>% rename(MSELFE11 = MSELF6R,
                                MSELFE12 = MSELF7R,
                                MSELFE13 = MSELF8R,
                                MSELFE14 = MSELF9R,
                                MSELFE15 = MSELF10R,
                                MSCC13 = MSCC11R,
                                MSCC14 = MSCC12R,
                                MLCOMM3 = MLCOMMa,
                                MLCOMM4 = MLCOMMb,
                                MLDEFF4 = MLDEFFa
                                ) %>% 
  mutate(MSELFE11 = MSELFE11*(-1) + 6,
         MSELFE12 = MSELFE12*(-1) + 6,
         MSELFE13 = MSELFE13*(-1) + 6,
         MSELFE14 = MSELFE14*(-1) + 6,
         MSELFE15 = MSELFE15*(-1) + 6,
         MSCC13 = MSCC13*(-1) + 6,
         MSCC14 = MSCC14*(-1) + 6,)

TEAMID <- multidat$TEAMID
```

## Make composite data frame

```{r}
#| eval: false

## Rename data
names(multidat) <- gsub("(^\\D+)(\\d{1,2})", "\\1_\\2", names(multidat))

## Select certain columns
no_multidat <- multidat %>% select(-matches("\\d$"), TEAMID)
multidat <- multidat %>% select(matches("\\d$")) %>% select(-matches("CHECK|MSELFE1_0|Q2"))


comp_split <- multidat %>% remove_all_labels(.) %>%
  dplyr::select(where(is.numeric))
  
comp_split <- comp_split %>%  
  split.default(sub("_.*", "", names(comp_split)))

comp <- purrr::map(comp_split, ~ rowMeans(.x, na.rm=T))
alph <- purrr::map(comp_split, ~ psych::alpha(.x), data = .x) %>%
  purrr::map(~ .x$total)

comp_df_full <- do.call("cbind", comp) %>% cbind(., no_multidat) %>% remove_all_labels(.)
alph_df <- do.call("rbind", alph) %>% round(., 2)
```

## Reliabilities

```{r reliabilities, include = T}
# prolific 
alph_df %>%
DT::datatable(
    extensions = 'Buttons', 
    options = list(dom = 'Bfrtip', 
                   buttons = c('excel', "csv"),
                   pageLength = 20))
```

## Correlations

```{r}
# select only numeric 
comp_df_mum <- comp_df_full[ , purrr::map_lgl(comp_df_full, is.numeric)]
cor_tab <- corstars(comp_df_mum)
cor_tab %>%
  DT::datatable(
    extensions = 'Buttons', 
    options = list(dom = 'Bfrtip', 
                   buttons = c('excel', "csv"),
                   pageLength = 35,
                  lengthMenu = c(20, 20, 20, 20)))

```

```{r}
comp_df_full <- cbind(comp_df_full, TEAMID)
```

## ICC

```{r}
library(misty)
comp_df_full <- transform(comp_df_full,id=as.numeric(factor(TEAMID)))
multilevel.icc(comp_df_full$MEXH, cluster = comp_df_full$id, type = 1, method = c("aov", "lme4", "nlme"), REML = TRUE,
               check = TRUE)

```

## Single level LPA

```{r}
library(MplusAutomation)
library(tidyLPA)

comp_df_aggr <- comp_df_full %>% group_by(TEAMID) %>% summarise_all(mean, na.rm = T)
    
    
data_LPA_mix <- comp_df_aggr %>% select(LEXCH, LINAP, LLEGTAC, LPRESS, LCONSUL) # see https://www.sciencedirect.com/science/article/abs/pii/S0148296321002885
LPA <- data_LPA_mix %>% estimate_profiles(n_profiles = 3:8, models = 1, package = "mplus", 
                      ANALYSIS = "starts = 200, 10;")  #%>%

```

## MLPA 

### Compute ICC

- behaviors: MLSSB MLGSB MMICRO MBULLY MLYING

```{r}
library(MplusAutomation)
library(glue)
library(here)


setwd("/Users/annekleine/Dropbox/leader_tactics/leader_tact")
mlca_icc <- mplusObject(
TITLE = "model00_basic_ICC_mlca",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM;
cluster = TEAMID;",
ANALYSIS =
"estimator = mlr;
type = basic twolevel; ! ask for ICC curves
processors = 10;",
MODEL = "",
OUTPUT = "sampstat;",
PLOT = "",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

mlca_00_fit <- mplusModeler(mlca_icc,
dataout= "analysis/enum_mplus/mlpa_icc.dat",
modelout= "analysis/enum_mplus/mlpa_icc.inp",
check=TRUE, run = TRUE, hashfilename = FALSE)

output_enum <- readModels("/Users/annekleine/Dropbox/leader_tactics/leader_tact/analysis/enum_mplus", quiet = TRUE)

output_enum$mlca_icc.out
```

### Fixed effect model
                            
```{r}
lca_k2_7 <- lapply(2:10, function(k) {
lca_enum <- mplusObject(
TITLE = glue("C{k}_mlpa_enum"),
VARIABLE =
glue(
"usevar = MLSSB MLGSB MMICRO MLCOMM;
classes = c({k});"),
ANALYSIS =
"estimator = mlr;
type = mixture;
starts = 500 100;",
MODEL = "",
OUTPUT = "",
PLOT =
"type = plot3;
series = MLSSB MLGSB MMICRO MLCOMM(*);",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)
lca_enum_fit <- mplusModeler(lca_enum,
dataout= glue("enum_mplus/c_{k}_mlpa_enum.dat"),
modelout= glue("enum_mplus/c_{k}_mlpa_enum.inp"),
check=TRUE, run = TRUE, hashfilename = FALSE)
})
```
### Read models and plot 

```{r}
library(gt)
output_enum <- readModels("/Users/annekleine/Dropbox/leader_tactics/leader_tact/analysis/enum_mplus", quiet = TRUE)
enum_summary <- LatexSummaryTable(output_enum,
keepCols=c("Title",
"LL",
"BIC",
"aBIC", 
"Entropy",
"SABIC"),
sortBy = "Title")
enum_summary %>%
gt()
```


### Plot profiles

```{r}
# extract posterior probabilities
pp1 <- as.data.frame(output_enum$c_6_mlpa_enum.out$gh5$means_and_variances_data$y_estimated_means$values)

# extract model estimated class sizes
c_size <- as.data.frame(output_enum$c_6_mlpa_enum.out$class_counts$modelEstimated$proportion)
colnames(c_size) <- paste0("cs")

c_size <- c_size %>% mutate(cs = round(cs*100, 1))
colnames(pp1) <- paste0("C", 1:6, glue(" ({c_size[1:6,]}%)"))
pp1 <- cbind(Var = paste0("U", 1:4), pp1)


# choose the order of indicators & label
pp1$Var <- factor(pp1$Var,
levels = c("U1","U2", "U3", "U4"),
labels = c("MLSSB", "MLGSB", "MMICRO", "MLCOMM"))
library(reshape2)
library(cowplot)
pd_long <- melt(pp1, id.vars = "Var")
# plot data
ggplot(pd_long, aes(as.integer(Var), value, shape = variable,
colour = variable, lty = variable)) +
geom_point(size = 4) + geom_line() +
scale_x_continuous("", breaks = 1:4, labels = pp1$Var) +
scale_y_continuous("Probability") +
scale_colour_grey() +
theme_cowplot() +
theme(text=element_text(family="Times New Roman", size=12),
legend.key.width = unit(.5, "line"),
legend.text = element_text(family="Times New Roman", size=12),
legend.title = element_blank(),
legend.position = "top")
```



https://jyx.jyu.fi/bitstream/handle/123456789/60696/1/makikangas%20et%20alfinal%20draft.pdf

Simulation studies conducted for different mixture models (i.e., LPA, growth mixture modeling, mixture regression modeling) suggest that to achieve a less biased and proper representation of the data, the variances across profiles should be freely estimated (Diallo, Morin, & Lu, 2016; Enders & Tofighi, 2008; Kim, Lamont et al., 2016; Peugh & Fan, 2013).

## Model 1: Single level LPA

```{r}
lpa_single <- mplusObject(
TITLE = "Single Level LPA",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM;
classes = c(6);",
ANALYSIS =
"estimator = mlr;
type = mixture;
starts = 500 100;",
MODEL = "
%OVERALL%
%C#1%
[MLSSB MLGSB MMICRO MLCOMM];
%C#2%
[MLSSB MLGSB MMICRO MLCOMM];
%C#3%
[MLSSB MLGSB MMICRO MLCOMM];
%C#4%
[MLSSB MLGSB MMICRO MLCOMM];
%C#5%
[MLSSB MLGSB MMICRO MLCOMM];
%C#6%
[MLSSB MLGSB MMICRO MLCOMM];",
OUTPUT = "TECH14",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

lca_enum_fit <- mplusModeler(lpa_single,
dataout= ("lpa_single/lpa_single.dat"),
modelout= glue("lpa_single/lpa_single.inp"),
check=TRUE, run = TRUE, hashfilename = FALSE)
```


## Model 2. Multilevel latent profile analysis: Level 2 variations in the size of the Level 1 profiles

```{r}
mlpa_02 <- mplusObject(
TITLE = "Multilevel LPA",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM;
classes = c(6);
cluster = id; 
within = MLSSB MLGSB MMICRO MLCOMM;",
ANALYSIS =
"estimator = mlr;
type = mixture twolevel;
starts = 0;",
MODEL =
"MODEL:
%BETWEEN%
%OVERALL%
c#1;
%WITHIN%
%C#1%
[MLSSB@1.151 MLGSB@3.437 MMICRO@1.377 MLCOMM@3.934];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#2%
[MLSSB@2.011 MLGSB@3.080 MMICRO@1.916 MLCOMM@3.600];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#3%
[MLSSB@3.786 MLGSB@2.568 MMICRO@5.128 MLCOMM@3.190];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#4%
[MLSSB@2.990 MLGSB@2.686 MMICRO@2.829 MLCOMM@3.351];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#5%
[MLSSB@1.286 MLGSB@3.296 MMICRO@3.638 MLCOMM@3.793];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#6%
[MLSSB@2.205 MLGSB@2.573 MMICRO@4.328 MLCOMM@3.365];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;",
OUTPUT = "TECH8;",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

mlpa_02_fit <- mplusModeler(mlpa_02,
dataout="mlpa/mlpa_02.dat",
modelout="mlpa/mlpa_02.inp",
check=TRUE, run = FALSE, hashfilename = FALSE)
```

The results of the random effect MLPA showed that the size of the latent profile varied significantly between leaders (variance estimate = 1.335, s.e. = 0.308, p < .001). 


## Model 3. The model of Level 2 classes based on the relative frequency of the Level 1 profiles (Model03 non-parametric model)

- 1 class: 12866.631
- 2 classes: 12841.834
- 3 classes: 12842.778
- 4 classes: 12875.156

### 2 level 2 classes
```{r}
mlpa_03 <- mplusObject(
TITLE = "Multilevel LPA - L2 classes based on freq of L1 profiles",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM;
classes = CB(2) C(6);
cluster = id; 
within = MLSSB MLGSB MMICRO MLCOMM;
between = CB;",
ANALYSIS =
"estimator = mlr;
type = mixture twolevel;",
MODEL =
"%WITHIN%
%OVERALL%
%BETWEEN%
%OVERALL%
C ON CB;

MODEL C:
%WITHIN%
%C#1%
[MLSSB MLGSB MMICRO MLCOMM];
%C#2%
[MLSSB MLGSB MMICRO MLCOMM];
%C#3%
[MLSSB MLGSB MMICRO MLCOMM];
%C#4%
[MLSSB MLGSB MMICRO MLCOMM];
%C#5%
[MLSSB MLGSB MMICRO MLCOMM];
%C#6%
[MLSSB MLGSB MMICRO MLCOMM];",
OUTPUT = "TECH8;",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

mlpa_03_fit <- mplusModeler(mlpa_03,
dataout="mlpa/mlpa_03.dat",
modelout="mlpa/mlpa_03.inp",
check=TRUE, run = FALSE, hashfilename = FALSE)
```

```{r}
output_mlpa <- readModels("/Users/annekleine/Dropbox/leader_tactics/leader_tact/analysis/mlpa", quiet = TRUE)

# extract posterior probabilities
pp1 <- output_mlpa$mlpa_03.out$class_counts[4] %>% data.frame(.)

ggplot(pp1) +
  aes(x = as.integer(mostLikely.patterns.CB), y = mostLikely.patterns.proportion, fill = mostLikely.patterns.C) +
  geom_col() + 
  geom_text(aes(label = scales::percent(mostLikely.patterns.proportion)), position = position_stack(.5)) 
```

### 3 level 2 classes

```{r}
mlpa_03b <- mplusObject(
TITLE = "Multilevel LPA - L2 classes based on freq of L1 profiles",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM;
classes = CB(3) C(6);
cluster = id; 
within = MLSSB MLGSB MMICRO MLCOMM;
between = CB;",
ANALYSIS =
"estimator = mlr;
type = mixture twolevel;",
MODEL =
"%WITHIN%
%OVERALL%
%BETWEEN%
%OVERALL%
C ON CB;

MODEL C:
%WITHIN%
%C#1%
[MLSSB MLGSB MMICRO MLCOMM];
%C#2%
[MLSSB MLGSB MMICRO MLCOMM];
%C#3%
[MLSSB MLGSB MMICRO MLCOMM];
%C#4%
[MLSSB MLGSB MMICRO MLCOMM];
%C#5%
[MLSSB MLGSB MMICRO MLCOMM];
%C#6%
[MLSSB MLGSB MMICRO MLCOMM];",
OUTPUT = "TECH8;",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

mlpa_03b_fit <- mplusModeler(mlpa_03b,
dataout="mlpa/mlpa_03b.dat",
modelout="mlpa/mlpa_03b.inp",
check=TRUE, run = FALSE, hashfilename = FALSE)
```

```{r}
output_mlpa <- readModels("/Users/annekleine/Dropbox/leader_tactics/leader_tact/analysis/mlpa", quiet = TRUE)

# extract posterior probabilities
pp1 <- output_mlpa$mlpa_03b.out$class_counts[4] %>% data.frame(.)

ggplot(pp1) +
  aes(x = as.integer(mostLikely.patterns.CB), y = mostLikely.patterns.proportion, fill = mostLikely.patterns.C) +
  geom_col(position = "stack") + 
  geom_text(aes(label = scales::percent(mostLikely.patterns.proportion)), position = position_stack(.5)) 
```


## Model 4: including covariates

```{r}
mlpa_4 <- mplusObject(
TITLE = "Multilevel LPA - L2 classes based on freq of L1 profiles",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM LCOALT LCONSUL 
          LDEPR LEXCH LINAP LINTEG LLEGTAC LPEAPP 
          LPRESS LRAPER LGENDER LAGE
          MSTRESS MGENDER MAGE MTENUR_O;
within = MLSSB MLGSB MMICRO MLCOMM;
classes = BC(2) C(6);
cluster = id; 
between = BC;",
ANALYSIS =
"estimator = mlr;
type = mixture twolevel;",
MODEL =
"%WITHIN%
%OVERALL%
C ON MSTRESS MGENDER MAGE MTENUR_O;
%BETWEEN%
%OVERALL%
C ON BC;
BC ON LCOALT LCONSUL LDEPR LEXCH LINAP 
      LINTEG LLEGTAC LPEAPP 
      LPRESS LRAPER LGENDER LAGE;

MODEL C:
%WITHIN%
%C#1%
[MLSSB@1.151 MLGSB@3.437 MMICRO@1.377 MLCOMM@3.934];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#2%
[MLSSB@2.011 MLGSB@3.080 MMICRO@1.916 MLCOMM@3.600];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#3%
[MLSSB@3.786 MLGSB@2.568 MMICRO@5.128 MLCOMM@3.190];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#4%
[MLSSB@2.990 MLGSB@2.686 MMICRO@2.829 MLCOMM@3.351];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#5%
[MLSSB@1.286 MLGSB@3.296 MMICRO@3.638 MLCOMM@3.793];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;
%C#6%
[MLSSB@2.205 MLGSB@2.573 MMICRO@4.328 MLCOMM@3.365];
MLSSB@0.054 MLGSB@0.617 MMICRO@0.350 MLCOMM@0.442;",
OUTPUT = "TECH8;",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

mlpa_4_fit <- mplusModeler(mlpa_4,
dataout="mlpa/mlpa_4.dat",
modelout="mlpa/mlpa_4.inp",
check=TRUE, run = FALSE, hashfilename = FALSE)
```
## Model 06: non-parametric model with level-2 factor on latent class indicators

```{r}
mlpa_06 <- mplusObject(
TITLE = "model06: non-parametric model with level-2 factor on latent class indicators",
VARIABLE =
"usevar = MLSSB MLGSB MMICRO MLCOMM;
classes = CB(2) C(6);
cluster = id; 
between = CB;",
ANALYSIS =
"estimator = mlr;
type = mixture twolevel;
starts = 20 10;
processors = 10;",
MODEL =
"%WITHIN%
%OVERALL%

%BETWEEN%
%OVERALL%
FU BY MLSSB MLGSB MMICRO MLCOMM;
[FU@0];
C on CB;

MODEL CB:
%BETWEEN%
%CB#1%
[FU@0];
%CB#2%
[FU];

MODEL C:
%BETWEEN%
%C#1%
[MLSSB MLGSB MMICRO MLCOMM];
%C#2%
[MLSSB MLGSB MMICRO MLCOMM];
%C#3%
[MLSSB MLGSB MMICRO MLCOMM];
%C#4%
[MLSSB MLGSB MMICRO MLCOMM];
%C#5%
[MLSSB MLGSB MMICRO MLCOMM];
%C#6%
[MLSSB MLGSB MMICRO MLCOMM];",
OUTPUT = "TECH8;",
usevariables = colnames(comp_df_full),
rdata = comp_df_full)

mlpa_03_fit <- mplusModeler(mlpa_06,
dataout="mlpa/mlpa_06.dat",
modelout="mlpa/mlpa_06.inp",
check=TRUE, run = FALSE, hashfilename = FALSE)
```

